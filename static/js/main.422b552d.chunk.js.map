{"version":3,"sources":["pages/Home.js","pages/Start.js","pages/Result.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","playerName","useRef","isStringEmpty","string","trim","length","className","type","onKeyPress","e","current","value","which","history","push","pathname","state","handleKeyPress","ref","onClick","Start","location","useState","choice","setChoice","setEmojiToTextState","emoji","generateComputerChoice","outcomes","Math","floor","random","playerChoice","computerChoice","Result","outcome","setOutcome","useEffect","getOutcome","hashIndexMatcher","indexOf","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.422b552d.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\n\r\nimport './home.css';\r\n\r\nconst Home = (props) => {\r\n\tconst playerName = useRef();\r\n\r\n\tconst handleClick = () => {\r\n\t\tif (!isStringEmpty(playerName.current.value)) {\r\n\t\t\tprops.history.push({ pathname: '/start', state: { playerName: playerName.current.value } });\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleKeyPress = (e) => {\r\n\t\tif (!isStringEmpty(playerName.current.value) && e.which === 13) {\r\n\t\t\tprops.history.push({ pathname: '/start', state: { playerName: playerName.current.value } });\r\n\t\t}\r\n\t};\r\n\r\n\tconst isStringEmpty = (string) => string.trim().length === 0;\r\n\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<h1>\r\n\t\t\t\tYou dare battle me at\r\n\t\t\t\t<br />\r\n\t\t\t\tRock, Paper, Scissors?\r\n\t\t\t\t<br />\r\n\t\t\t\tYou got no chance, kid!\r\n\t\t\t</h1>\r\n\t\t\t<p>What's your name, ya chancer?</p>\r\n\t\t\t<input type=\"text\" onKeyPress={(e) => handleKeyPress(e)} ref={playerName} />\r\n\t\t\t<button onClick={handleClick}>Start</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport './start.css';\r\n\r\nconst Start = (props) => {\r\n\tconst { playerName } = props.location.state;\r\n\tconst [choice, setChoice] = useState(null);\r\n\r\n\tconst setEmojiToTextState = (emoji) => {\r\n\t\tif (emoji === '✊') {\r\n\t\t\tsetChoice('Rock');\r\n\t\t}\r\n\t\tif (emoji === '✋') {\r\n\t\t\tsetChoice('Paper');\r\n\t\t}\r\n\t\tif (emoji === '✌') {\r\n\t\t\tsetChoice('Scissors');\r\n\t\t}\r\n\t\treturn;\r\n\t};\r\n\r\n\tconst generateComputerChoice = () => {\r\n\t\tconst outcomes = ['Rock', 'Paper', 'Scissors'];\r\n\t\treturn outcomes[Math.floor(Math.random() * outcomes.length)];\r\n\t};\r\n\r\n\tconst handleClick = () => {\r\n\t\tprops.history.push({\r\n\t\t\tpathname: '/result',\r\n\t\t\tstate: { playerChoice: choice, playerName: playerName, computerChoice: generateComputerChoice() }\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<h2>\r\n\t\t\t\tOk, <span className=\"player-name\">{playerName}</span> lets see whatcha got!\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\tchoose rock, paper or scissors\r\n\t\t\t</h2>\r\n\t\t\t<div className=\"choice-container\">\r\n\t\t\t\t<button className=\"choice-btn\" onClick={() => setEmojiToTextState('✊')}>\r\n\t\t\t\t\t✊\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className=\"choice-btn\" onClick={() => setEmojiToTextState('✋')}>\r\n\t\t\t\t\t✋\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className=\"choice-btn\" onClick={() => setEmojiToTextState('✌')}>\r\n\t\t\t\t\t✌\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t{choice !== null ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h3>You chose {choice}.</h3>\r\n\t\t\t\t\t<button onClick={() => handleClick()}>Confirm</button>\r\n\t\t\t\t</>\r\n\t\t\t) : null}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Start;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './result.css';\r\n\r\nconst Result = (props) => {\r\n\tconst { playerName, playerChoice, computerChoice } = props.location.state;\r\n\tconst [ outcome, setOutcome ] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetOutcome();\r\n\t}, []);\r\n\r\n\tconst getOutcome = () => {\r\n\t\tconst combinations = [\r\n\t\t\t'Rock Scissors',\r\n\t\t\t'Scissors Paper',\r\n\t\t\t'Paper Rock',\r\n\t\t\t'Rock Paper',\r\n\t\t\t'Paper Scissors',\r\n\t\t\t'Scissors Rock'\r\n\t\t];\r\n\r\n\t\tlet hashIndexMatcher;\r\n\r\n\t\thashIndexMatcher = combinations.indexOf(`${playerChoice} ${computerChoice}`);\r\n\r\n\t\tif (hashIndexMatcher === -1) {\r\n\t\t\tsetOutcome('DRAW');\r\n\t\t} else if (hashIndexMatcher > -1 && hashIndexMatcher < 3) {\r\n\t\t\tsetOutcome('WIN');\r\n\t\t} else {\r\n\t\t\tsetOutcome('LOSE');\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClick = () => {\r\n\t\tprops.history.push({\r\n\t\t\tpathname: '/start',\r\n\t\t\tstate: { playerName: playerName }\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<div className=\"outcome\">\r\n\t\t\t\t<strong>YOU {outcome}</strong>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<div>\r\n\t\t\t\t<strong>{playerName}</strong> chose <strong>{playerChoice}</strong>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<div>\r\n\t\t\t\t<strong>Computer</strong> chose <strong>{computerChoice}</strong>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<button onClick={handleClick}>Play again?</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport Start from './pages/Start';\r\nimport Result from './pages/Result';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<HashRouter>\r\n\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t\t<Route path=\"/start\" component={Start} />\r\n\t\t\t<Route path=\"/result\" component={Result} />\r\n\t\t</HashRouter>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}