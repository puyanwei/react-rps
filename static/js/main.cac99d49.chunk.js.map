{"version":3,"sources":["reducers/RPSReducer.js","contexts/RPSContext.js","pages/Home.js","pages/Start.js","pages/Result.js","App.js","serviceWorker.js","index.js"],"names":["RPSReducer","state","action","type","payload","playerName","choice","playerChoice","computerChoice","scores","playerScore","computerScore","Error","RPSContext","createContext","initialState","RPSContextProvider","children","useReducer","dispatch","contextValue","useMemo","Provider","value","Home","props","useContext","playerNameEntry","useRef","sendNameToPayloadAndGoToStart","current","history","push","pathname","isStringEmpty","string","trim","length","className","ref","onKeyPress","e","which","onClick","Start","setEmojiToTextState","emoji","generateComputerChoice","outcomes","Math","floor","random","Result","useState","result","setResult","useEffect","firstChoice","secondChoice","hashIndexMatcher","indexOf","getResult","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cac99d49.chunk.js","sourcesContent":["export const RPSReducer = (state, action) => {\r\n\tconst { type, payload } = action;\r\n\tswitch (type) {\r\n\t\tcase 'SET_NAME':\r\n\t\t\treturn { ...state, playerName: payload };\r\n\t\tcase 'SET_PLAYER_CHOICE':\r\n\t\t\treturn { ...state, choice: { ...state.choice, playerChoice: payload } };\r\n\t\tcase 'SET_COMPUTER_CHOICE':\r\n\t\t\treturn { ...state, choice: { ...state.choice, computerChoice: payload } };\r\n\t\tcase 'PLAYER_WINS':\r\n\t\t\treturn { ...state, scores: { ...state.scores, playerScore: state.scores.playerScore + 1 } };\r\n\t\tcase 'COMPUTER_WINS':\r\n\t\t\treturn { ...state, scores: { ...state.scores, computerScore: state.scores.computerScore + 1 } };\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n};\r\n","import React, { createContext, useReducer, useMemo } from 'react';\r\nimport { RPSReducer } from '../reducers/RPSReducer';\r\n\r\nexport const RPSContext = createContext();\r\n\r\nconst initialState = {\r\n\tplayerName: '',\r\n\tchoice: { playerChoice: null, computerChoice: null },\r\n\tscores: { playerScore: 0, computerScore: 0 }\r\n};\r\n\r\nconst RPSContextProvider = ({ children }) => {\r\n\tconst [ state, dispatch ] = useReducer(RPSReducer, initialState);\r\n\r\n\tconst contextValue = useMemo(() => ({ state, dispatch }), [ state, dispatch ]);\r\n\r\n\treturn <RPSContext.Provider value={contextValue}>{children}</RPSContext.Provider>;\r\n};\r\n\r\nexport default RPSContextProvider;\r\n","import React, { useRef, useContext } from 'react';\r\nimport { RPSContext } from '../contexts/RPSContext';\r\nimport './home.css';\r\n\r\nconst Home = (props) => {\r\n    const { dispatch } = useContext(RPSContext);\r\n    const playerNameEntry = useRef();\r\n\r\n    const handleClick = () => {\r\n        if (!isStringEmpty(playerNameEntry.current.value)) {\r\n            sendNameToPayloadAndGoToStart()\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (!isStringEmpty(playerNameEntry.current.value) && e.which === 13) {\r\n            sendNameToPayloadAndGoToStart()\r\n        }\r\n    };\r\n\r\n    const sendNameToPayloadAndGoToStart = () => {\r\n        dispatch({ type: 'SET_NAME', payload: playerNameEntry.current.value });\r\n        props.history.push({\r\n            pathname: '/start'\r\n        });\r\n        return\r\n    }\r\n\r\n    const isStringEmpty = (string) => string.trim().length === 0;\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1>\r\n                You dare battle me at\r\n\t\t\t\t<br />\r\n                Rock, Paper, Scissors?\r\n\t\t\t\t<br />\r\n                You got no chance, kid!\r\n\t\t\t</h1>\r\n            <p>What's your name, ya chancer?</p>\r\n            <input type=\"text\" ref={playerNameEntry} onKeyPress={handleKeyPress} />\r\n            <button onClick={handleClick}>Start</button>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useContext } from \"react\";\r\nimport { RPSContext } from \"../contexts/RPSContext\";\r\n\r\nimport \"./start.css\";\r\n\r\nconst Start = props => {\r\n    const { state: { playerName, choice: { playerChoice } }, dispatch } = useContext(RPSContext);\r\n\r\n    const setEmojiToTextState = emoji => {\r\n        if (emoji === \"✊\") {\r\n            dispatch({ type: 'SET_PLAYER_CHOICE', payload: \"Rock\" });\r\n        }\r\n        if (emoji === \"✋\") {\r\n            dispatch({ type: 'SET_PLAYER_CHOICE', payload: \"Paper\" });\r\n        }\r\n        if (emoji === \"✌\") {\r\n            dispatch({ type: 'SET_PLAYER_CHOICE', payload: \"Scissors\" });\r\n        }\r\n        return;\r\n    };\r\n\r\n    const generateComputerChoice = () => {\r\n        const outcomes = [\"Rock\", \"Paper\", \"Scissors\"];\r\n        return outcomes[Math.floor(Math.random() * outcomes.length)];\r\n    };\r\n\r\n    const handleClick = () => {\r\n        dispatch({ type: 'SET_COMPUTER_CHOICE', payload: generateComputerChoice() });\r\n\r\n        props.history.push({\r\n            pathname: \"/result\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h2>\r\n                Ok, <span className=\"player-name\">{playerName}</span> lets see\r\n                whatcha got!\r\n                <br />\r\n                <br />\r\n                choose rock, paper or scissors\r\n            </h2>\r\n            <div className=\"choice-container\">\r\n                <button\r\n                    className=\"choice-btn\"\r\n                    onClick={() => setEmojiToTextState(\"✊\")}\r\n                >\r\n                    ✊\r\n                </button>\r\n                <button\r\n                    className=\"choice-btn\"\r\n                    onClick={() => setEmojiToTextState(\"✋\")}\r\n                >\r\n                    ✋\r\n                </button>\r\n                <button\r\n                    className=\"choice-btn\"\r\n                    onClick={() => setEmojiToTextState(\"✌\")}\r\n                >\r\n                    ✌\r\n                </button>\r\n            </div>\r\n\r\n            {playerChoice !== null ? (\r\n                <>\r\n                    <h3>You chose {playerChoice}.</h3>\r\n                    <button onClick={() => handleClick()}>Confirm</button>\r\n                </>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Start;","import React, { useState, useEffect, useContext } from 'react';\r\nimport { RPSContext } from '../contexts/RPSContext';\r\n\r\nimport './result.css';\r\n\r\nconst Result = (props) => {\r\n\tconst [result, setResult] = useState(null);\r\n\r\n\tconst {\r\n\t\tstate:\r\n\t\t{\r\n\t\t\tplayerName,\r\n\t\t\tchoice: { playerChoice, computerChoice },\r\n\t\t\tscores: { playerScore, computerScore }\r\n\t\t},\r\n\t\tdispatch\r\n\t} = useContext(RPSContext);\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tconst getResult = (firstChoice, secondChoice) => {\r\n\t\t\tconst combinations = [\r\n\t\t\t\t'Rock Scissors',\r\n\t\t\t\t'Scissors Paper',\r\n\t\t\t\t'Paper Rock',\r\n\t\t\t\t'Rock Paper',\r\n\t\t\t\t'Paper Scissors',\r\n\t\t\t\t'Scissors Rock'\r\n\t\t\t];\r\n\r\n\t\t\tlet hashIndexMatcher;\r\n\r\n\t\t\thashIndexMatcher = combinations.indexOf(`${firstChoice} ${secondChoice}`);\r\n\r\n\t\t\tif (hashIndexMatcher === -1) {\r\n\t\t\t\tsetResult('DRAW');\r\n\t\t\t} else if (hashIndexMatcher > -1 && hashIndexMatcher < 3) {\r\n\t\t\t\tsetResult('WIN');\r\n\t\t\t\tdispatch({ type: 'PLAYER_WINS' })\r\n\t\t\t} else {\r\n\t\t\t\tsetResult('LOSE');\r\n\t\t\t\tdispatch({ type: 'COMPUTER_WINS' })\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tgetResult(playerChoice, computerChoice);\r\n\t}, [computerChoice, playerChoice, dispatch]);\r\n\r\n\r\n\tconst handleClick = () => {\r\n\t\tprops.history.push({\r\n\t\t\tpathname: '/start'\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<div className=\"large-font\">\r\n\t\t\t\t<strong>YOU {result}</strong>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<div>\r\n\t\t\t\t<strong>{playerName}</strong> chose <strong>{playerChoice}</strong>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<div>\r\n\t\t\t\t<strong>Computer</strong> chose <strong>{computerChoice}</strong>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<br />\r\n\t\t\t\t<strong className=\"large-font\">{`${playerScore}-${computerScore}`}</strong>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<button onClick={handleClick}>Play again?</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport Start from './pages/Start';\r\nimport Result from './pages/Result';\r\n\r\nimport RPSContextProvider from './contexts/RPSContext';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<HashRouter>\r\n\t\t\t<RPSContextProvider>\r\n\t\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t\t\t<Route path=\"/start\" component={Start} />\r\n\t\t\t\t<Route path=\"/result\" component={Result} />\r\n\t\t\t</RPSContextProvider>\r\n\t\t</HashRouter>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}